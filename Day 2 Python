Keyword:
----------------------------------------------------------------------------------------
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 
'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global',
'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return',
'try', 'while', 'with', 'yield']

Iteration Keywords:
------------------
for ---> used to control flow and have looping
while ---> same as for
continue ---> controls flow, but used to skip iterations. Not to end a loop.
break ---> controls flow of loop and ends it. 

# Using for loop
for i in range(10):
  
    print(i, end = " ")
      
    # break the loop as soon it sees 6
    if i == 6:
        break
      
print()  output= 0 1 2 3 4 5 6 

      
# loop from 1 to 10
i = 0
while i <10:
      
    # If i is equals to 6,
    # continue to next iteration
    # without printing
    if i == 6:                            
        i+= 1                            
        continue   #------------------------ goes to top of loop
    else:
        # otherwise print the value
        # of i
        print(i, end = " ")
          
    i += 1
output = 0 1 2 3 4 5 7 8 9 

Conditional Keywords:
--------------------
if ---> control statement for decision making. for truth, if block is executed.
else  ---> false forces to go intoelse part
elif  ---> short for else if

# Python program to illustrate if-elif-else ladder
#!/usr/bin/python
  
i = 20
if (i == 10):
    print ("i is 10")
elif (i == 20):
    print ("i is 20")
else:
    print ("i is not present")
    
declare user edfined function:
---------------------
def  ---> define user function

# def keyword
def fun():
    print("Inside Function")
      
fun()

Return Keywords:
---------------
return  --->  returns from function
yield  --->  used like return, but used to return generator

# Return keyword
def fun():
    S = 0
      
    for i in range(10):
        S += i
    return S
  
print(fun())
  
# Yield Keyword
def fun():
    S = 0
      
    for i in range(10):
        S += i
        yield S
  
for i in fun():
    print(i)


Class Keyword:
-------------
class ----> declare user defined class

# Python3 program to
# demonstrate instantiating
# a class
  
  
class Dog:
      
    # A simple class
    # attribute
    attr1 = "mammal"
    attr2 = "dog"
  
    # A sample method
    def fun(self):
        print("I'm a", self.attr1)
        print("I'm a", self.attr2)
  
# Driver code
# Object instantiation
Rodger = Dog()
  
# Accessing class attributes
# and method through objects
print(Rodger.attr1)
Rodger.fun()

Wrap execuation of block:
------------------------
with  --->  to wrap the execution of block of code within methods defined by context manager. not used mostly

# using with statement
with open('file_path', 'w') as file:
    file.write('hello world !')
    
as  --->   used to give alaise to imported module

import math as gfg
  
print(gfg.factorial(5))

pass  ---> is a null statement.nothing happens. used as placeholder and to prevent indentation error.

n = 10
for i in range(n):
      
# pass can be used as placeholder
# when code is to added later
pass

Lambda  ---> used to make inline returning functions with no statements allowed internally. 

# Lambda keyword
g = lambda x: x*x*x
  
print(g(7))

Importting modules:
------------------
import --->  include particular module into program
from ----> import functionality of module

# import keyword
import math
print(math.factorial(10))
  
# from keyword
from math import factorial
print(factorial(10))

Exception handling keywords:
---------------------------
try  ---> code in try block is checked, for errors except block is executed.
except  --->  catchs exception
finally  ---> executed always, irrespective of case in try
raise ---> can rasie excption explicitly 
assert  ---> for debugging purpose. AssertionError is raised if code check resulted in false. own message can be used with comma.


# initializing number
a = 4
b = 0
  
# No exception Exception raised in try block
try:
    k = a//b # raises divide by zero exception.
    print(k)
  
# handles zerodivision exception
except ZeroDivisionError:
    print("Can't divide by zero")
  
finally:
    # this block is always executed
    # regardless of exception generation.
    print('This is always executed')
  
# assert Keyword  
# using assert to check for 0
print ("The value of a / b is : ")
assert b != 0, "Divide by 0 error"
print (a / b)

delete refrenece:
----------------
del  --->  delete refrence of an object like that of list, or variable

my_variable1 = 20
my_variable2 = "GeeksForGeeks"
  
# check if my_variable1 and my_variable2 exists
print(my_variable1)
print(my_variable2)
  
# delete both the variables
del my_variable1
del my_variable2
  
# check if my_variable1 and my_variable2 exists
print(my_variable1)
print(my_variable2)

Scope keywords:
---------------
global --->  hhave global scope

# global variable
a = 15
b = 10
  
# function to perform addition
def add():
    c = a + b
    print(c)
  
# calling a function
add()
  
# nonlocal keyword
def fun():
    var1 = 10
  
    def gun():
        # tell python explicitly that it
        # has to access var1 initialized
        # in fun on line 2
        # using the keyword nonlocal
        nonlocal var1
          
        var1 = var1 + 10
        print(var1)
  
    gun()
fun()

--------------------------------------------------------------------------------------------------------
NameSpace and scope in python:
--------------------------------------------------------------------------------------------------------

NameSpace is a system that has a unique name for each and evey object.Stored in a oython dictionary.
Name ---> unique name + Space ---> scope of object or locatio from where it is accessing it

Types:
------
Built-in Namespace(all built-in objects) >>> Global Namespace(when user defined module is created)  >>> Local Namespace(when local function with in module is created)

Lifetime of namespace:
---------------------
its lifietime ends where scopeof object ends. Therefore, accessing inner namepsace from outer namepsace is not possible.

# var1 is in the global namespace
var1 = 5
def some_func():
 
    # var2 is in the local namespace
    var2 = 6
    def some_inner_func():
 
        # var3 is in the nested local
        # namespace
        var3 = 7


def some_func():
    print("Inside some_func")
    def some_inner_func():
        var = 10
        print("Inside inner function, value of var:",var)
    some_inner_func()
    print("Try printing var from outer function: ",var)
some_func()

-------------------------------------------------------------------------------------------------------
Statements, indentation and Cooment:
-------------------------------------------------------------------------------------------------------
Statement:
---------
instruction in source code.
Assignement, Conditional, Loop statements etc

Multi-line statement: could be braces (), {} ,[], ; or continuation character (\)

Declared using Continuation Character (\):
s = 1 + 2 + 3 + \
    4 + 5 + 6 + \
    7 + 8 + 9

Declared using parentheses () :
n = (1 * 2 * 3 + 7 + 8 + 9)

Declared using square brackets [] :
footballer = ['MESSI',
          'NEYMAR',
          'SUAREZ']

Declared using braces {} :
x = {1 + 2 + 3 + 4 + 5 + 6 +
     7 + 8 + 9}

Declared using semicolons(;) :
flag = 2; ropes = 3; pole = 4

Indentation:
-----------
Most languages have {} to edfine block og code.
all statements with same indentation are from same block statement.

Comment:
--------
# -- > single line comment


a, b = 1, 3 # Declaring two integers
sum = a + b # adding two integers
print(sum) # displaying the output

"""  ---> multi- line comment
----------------------------------------------------------------------------------------------------------
Assign values to variable:
---------------------------------------------------------------------------------------------------------
a = 5
b =5.0

