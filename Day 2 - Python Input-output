Input:
------
Input()  ---> takesinput, and decides what data type is entered. if wrong input, then exception or error is raised.
          it always converts entered data into string type.
         to get some other data type other than string, do type-casting.

# Python program showing 
# a use of input()
  
val = input("Enter your value: ")
print(val)

-----
# Program to check input 
# type in Python
  
num = input ("Enter number :")
print(num)
name1 = input("Enter name : ")
print(name1)
  
# Printing type of input value
print ("type of number", type(num))
print ("type of name", type(name1))

raw_input() ---> used in older versions of 2.x

# Python program showing 
# a use of raw_input()
  
g = raw_input("Enter your name : ")
print g

Take input from Console(also called shell):
------------------------------------------
it is a command line interpreter. takes one command, checks for errors, then executes it.
has >>>
input() is used to take input from it.

Typecasting:
-----------

string = str(input())

# input
num1 = int(input())
num2 = float(input())
  
# printing the sum in integer
print(num1 + num2)

Multiple Inputs:
---------------
split() ---> use it to divide a string or take multiple values at once
input().split(separator, maxsplit)


# Python program showing how to
# multiple input using split
 
# taking two inputs at a time
x, y = input("Enter two values: ").split()
print("Number of boys: ", x)
print("Number of girls: ", y)
print()
 
# taking three inputs at a time
x, y, z = input("Enter three values: ").split()
print("Total number of students: ", x)
print("Number of boys is : ", y)
print("Number of girls is : ", z)
print()
 
# taking two inputs at a time
a, b = input("Enter two values: ").split()
print("First number is {} and second number is {}".format(a, b))
print()
 
# taking multiple inputs at a time
# and type casting using list() function
x = list(map(int, input("Enter multiple values: ").split()))
print("List of students: ", x)

List Comprehension:
------------------

# taking multiple inputs at a time separated by comma
x = [int(x) for x in input("Enter multiple value: ").split(",")]
print("Number of list is: ", x)

----
# Python program showing
# how to take multiple input
# using List comprehension
 
# taking two input at a time
x, y = [int(x) for x in input("Enter two values: ").split()]
print("First Number is: ", x)
print("Second Number is: ", y)
print()
 
# taking three input at a time
x, y, z = [int(x) for x in input("Enter three values: ").split()]
print("First Number is: ", x)
print("Second Number is: ", y)
print("Third Number is: ", z)
print()
 
# taking two inputs at a time
x, y = [int(x) for x in input("Enter two values: ").split()]
print("First number is {} and second number is {}".format(x, y))
print()
 
# taking multiple inputs at a time
x = [int(x) for x in input("Enter multiple values: ").split()]
print("Number of list is: ", x)

Output:
--------
print()  --->  Syntax: print(value(s), sep= ‘ ‘, end = ‘\n’, file=file, flush=flush)

Parameters: 

value(s) : Any value, and as many as you like. Will be converted to string before printed
sep=’separator’ : (Optional) Specify how to separate the objects, if there is more than one.Default :’ ‘
end=’end’: (Optional) Specify what to print at the end.Default : ‘\n’
file : (Optional) An object with a write method. Default :sys.stdout
flush : (Optional) A Boolean, specifying if the output is flushed (True) or buffered (False). Default: False
Returns: It returns output to the screen.

string literals:
---------------
\n  ---> newline 
"" ----> empty quote for empty line
end=" "   --->  at end of printed string, places space. defualt is newline.

# This line will automatically add a new line before the
# next print statement
print ("GeeksForGeeks is the best platform for DSA content")
 
# This print() function ends with "**" as set in the end argument.
print ("GeeksForGeeks is the best platform for DSA content", end= "**")
print("Welcome to GFG")

flush argument:
--------------
I/Os in python are generally buffered, i.e written  in chunks rather than one char after other. 
Flush= False ---> buffered, in chunks is faster
flush=True  --> written in sequence, is slow.

import time
 
count_seconds = 3
for i in reversed(range(count_seconds + 1)):
    if i > 0:
        print(i, end='>>>')
        time.sleep(1)
    else:
        print('Start')
        
This code above willwait for3 seconds and then abruptly writes all at once, caused by buffereing. waste of 3 secs.

-----------

import time
 
count_seconds = 3
for i in reversed(range(count_seconds + 1)):
    if i > 0:
        print(i, end='>>>', flush = True)
        time.sleep(1)
    else:
        print('Start')
        
this will write each char one after other.

Seperator:
---------
Multiple statements in single print

b= "for"
print("geeks", b, "geek", sep='12')

File Argument:
-------------
By default, the print() function is bound to sys.stdout through the file argument. 

import io
 
# declare a dummy file
dummy_file = io.StringIO()
 
# add message to the dummy file
print('Hello Geeks!!', file=dummy_file)
 
# get the value from dummy file
dummy_file.getvalue()
-------------------------------------------
# Python 2 code for printing
# on the same line printing
# geeks and geeksforgeeks
# in the same line
 
print("geeks"),
print("geeksforgeeks")
 
# array
a = [1, 2, 3, 4]
 
# printing a element in same
# line
for i in range(4):
    print(a[i]),
------------------------------------------
# Python 3 code for printing
# on the same line printing
# geeks and geeksforgeeks
# in the same line
 
print("geeks", end =" ")
print("geeksforgeeks")
 
# array
a = [1, 2, 3, 4]
 
# printing a element in same
# line
for i in range(4):
    print(a[i], end =" ")
-----------------------------------------
# Print without newline in Python 3.x without using for loop
 
l=[1,2,3,4,5,6]
 
# using * symbol prints the list
# elements in a single line
print(*l)
--------------------------------------
#for formatting a date use of seperator
print('09','12','2016', sep='-')
-------------------------------------
print('prtk','agarwal', sep='', end='@')
print('geeksforgeeks')
-------------------------------------

Output Formating:
----------------
